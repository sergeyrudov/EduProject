buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'io.qameta.allure', name: 'allure-gradle', version: '2.8.1'
    }
}

plugins {
    id 'java-library'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.4.30-RC'
    id "io.qameta.allure" version "2.8.1"

    id("io.gitlab.arturbosch.detekt") version "1.15.0"
    id("jacoco")
    id("pl.allegro.tech.build.axion-release") version "1.11.0"

}

group 'cloud.autotests'
version '1.0'

test {
    useJUnitPlatform()
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

ext {
    junitVersion = "5.6.2"
    allureVersion = '2.13.2'
}

repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()

}

allure {
    version = "${allureVersion}"
    autoconfigure = true

    useJUnit5 {
        version = "${allureVersion}"
    }
}

def selenideVersion = "5.20.1",
    junitVersion = "5.7.1"

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.4.2'
    implementation 'org.projectlombok:lombok:1.18.16'
    testImplementation "io.rest-assured:rest-assured:4.1.2"
    testImplementation 'org.mockito:mockito-core:4.3.1'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'


    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.5'
    compile 'org.jdom:jdom2:2.0.6'
    compile group: 'io.appium', name: 'java-client', version: '7.4.1'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-api', version: '3.141.59'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-api', version: '3.141.59'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '3.141.59'
    implementation group: 'com.google.guava', name: 'guava', version: '10.0.1'
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.7'
    //compile 'org.slf4j:slf4j-api:1.7.5'
    //compile 'org.slf4j:slf4j-simple:1.7.5'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.20.2'
    testCompile("org.assertj:assertj-core:3.11.1")

    testCompile("org.junit.jupiter:junit-jupiter-params:5.7.0")
    implementation group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.2.Final'

    implementation "org.junit.jupiter:junit-jupiter:5.8.1"
    implementation "org.testcontainers:testcontainers:1.17.3"
    implementation "org.testcontainers:junit-jupiter:1.17.3"
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.4.0'
    implementation group: 'org.testcontainers', name: 'postgresql', version: '1.17.3'
    implementation group: 'org.springframework', name: 'spring-test', version: '5.3.22'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.3.12.RELEASE'












    compile 'com.codeborne:selenide:5.11.0'
    compile "io.qameta.allure:allure-selenide:${allureVersion}"
    compile "io.qameta.allure:allure-rest-assured:${allureVersion}"
    compile 'io.rest-assured:rest-assured:4.1.2'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.10.3'

    compile("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    compile("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testCompile 'com.codeborne:pdf-test:1.6.1'
    implementation group: 'io.github.classgraph', name: 'classgraph', version: '4.8.83'


    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.5.1'



    testImplementation (
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "com.codeborne:selenide:$selenideVersion",
            "org.hamcrest:hamcrest-all:1.3",
            "org.assertj:assertj-core:3.19.0",
            "net.lingala.zip4j:zip4j:1.3.2",
            "com.codeborne:xls-test:1.4.3",
            "org.apache.poi:poi:5.0.0",
            "org.apache.poi:poi-scratchpad:5.0.0",
            "org.apache.poi:poi-ooxml:5.0.0",
            "org.apache.poi:poi-ooxml-full:5.0.0",
            "commons-codec:commons-codec:1.15"
    )
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"


}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties = System.properties
    if (project.hasProperty("web_threads")) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': project.getProperty("web_threads").toInteger()
        ]
    }
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    // Discover and execute JUnit4-based tests
    useJUnit()

    // Discover and execute TestNG-based tests
    useTestNG()

    // Discover and execute JUnit Platform-based tests
    useJUnitPlatform()
}

tasks.withType(Test as Class<Task>) {
    scanForTestClasses = true
    include "KotlinExperience.InitData" // whatever Ant pattern matches your test class files
}